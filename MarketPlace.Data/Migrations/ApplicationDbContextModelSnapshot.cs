// <auto-generated />
using System;
using MarketPlace.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MarketPlace.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MarketPlace.Data.Domains.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("MarketPlace.Data.Domains.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ConfirmationLinkExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("ForcePwdChange")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MyReferralCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("WhoReferredMeCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MarketPlace.Data.Domains.Kyc", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResidentialAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("Kycs");
                });

            modelBuilder.Entity("MarketPlace.Data.Domains.MyTable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("MyTables");
                });

            modelBuilder.Entity("MarketPlace.Data.Domains.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProductBrandId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductConditionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductModelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductTypeId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductBrandId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductConditionId");

                    b.HasIndex("ProductModelId");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("StateId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MarketPlace.Data.Domains.ProductBrand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("ProductBrands");
                });

            modelBuilder.Entity("MarketPlace.Data.Domains.ProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProductTypeId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 192, DateTimeKind.Local).AddTicks(9779),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Edible"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 193, DateTimeKind.Local).AddTicks(4917),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Mechanical"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 193, DateTimeKind.Local).AddTicks(9903),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Electrical"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 194, DateTimeKind.Local).AddTicks(3921),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Wooden"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 194, DateTimeKind.Local).AddTicks(9938),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Ceramic"
                        });
                });

            modelBuilder.Entity("MarketPlace.Data.Domains.ProductCondition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("ProductConditions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 189, DateTimeKind.Local).AddTicks(9879),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Brand New"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 191, DateTimeKind.Local).AddTicks(475),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Foreign Use"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 191, DateTimeKind.Local).AddTicks(8685),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Fairly Used"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 192, DateTimeKind.Local).AddTicks(4163),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Really Used"
                        });
                });

            modelBuilder.Entity("MarketPlace.Data.Domains.ProductModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProductBrandId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ProductBrandId");

                    b.ToTable("ProductModels");
                });

            modelBuilder.Entity("MarketPlace.Data.Domains.ProductType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 181, DateTimeKind.Local).AddTicks(9315),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Vehicles"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 182, DateTimeKind.Local).AddTicks(6849),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Properties"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 183, DateTimeKind.Local).AddTicks(4791),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Mobile Gadgets"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 184, DateTimeKind.Local).AddTicks(1187),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 184, DateTimeKind.Local).AddTicks(7592),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Home Appliances"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 185, DateTimeKind.Local).AddTicks(4719),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Cosmetics/Beauty"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 185, DateTimeKind.Local).AddTicks(9702),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Fashion"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 186, DateTimeKind.Local).AddTicks(4108),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 9L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 186, DateTimeKind.Local).AddTicks(8647),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Outdoor Equipment"
                        },
                        new
                        {
                            Id = 10L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 187, DateTimeKind.Local).AddTicks(3724),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Jobs"
                        },
                        new
                        {
                            Id = 11L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 187, DateTimeKind.Local).AddTicks(9655),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Babies/Toys"
                        },
                        new
                        {
                            Id = 12L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 188, DateTimeKind.Local).AddTicks(5100),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Pets"
                        },
                        new
                        {
                            Id = 13L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 189, DateTimeKind.Local).AddTicks(836),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Agriculture"
                        },
                        new
                        {
                            Id = 14L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 189, DateTimeKind.Local).AddTicks(4997),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Workman"
                        });
                });

            modelBuilder.Entity("MarketPlace.Data.Domains.State", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("StateCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 111, DateTimeKind.Local).AddTicks(3733),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Akwa Ibom",
                            StateCode = "01"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 112, DateTimeKind.Local).AddTicks(9634),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Anambra",
                            StateCode = "02"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 113, DateTimeKind.Local).AddTicks(7482),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Bauchi",
                            StateCode = "03"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 115, DateTimeKind.Local).AddTicks(3426),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Adamawa",
                            StateCode = "04"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 116, DateTimeKind.Local).AddTicks(7392),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Benue",
                            StateCode = "05"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 117, DateTimeKind.Local).AddTicks(6925),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Borno",
                            StateCode = "06"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 133, DateTimeKind.Local).AddTicks(9605),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Cross River",
                            StateCode = "07"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 135, DateTimeKind.Local).AddTicks(1604),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "FCT",
                            StateCode = "08"
                        },
                        new
                        {
                            Id = 9L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 136, DateTimeKind.Local).AddTicks(308),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Delta",
                            StateCode = "09"
                        },
                        new
                        {
                            Id = 10L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 136, DateTimeKind.Local).AddTicks(8039),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Imo",
                            StateCode = "10"
                        },
                        new
                        {
                            Id = 11L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 137, DateTimeKind.Local).AddTicks(4136),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Kaduna",
                            StateCode = "11"
                        },
                        new
                        {
                            Id = 12L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 138, DateTimeKind.Local).AddTicks(142),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Kano",
                            StateCode = "12"
                        },
                        new
                        {
                            Id = 13L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 139, DateTimeKind.Local).AddTicks(639),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Katsina",
                            StateCode = "13"
                        },
                        new
                        {
                            Id = 14L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 139, DateTimeKind.Local).AddTicks(6813),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Kwara",
                            StateCode = "14"
                        },
                        new
                        {
                            Id = 15L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 140, DateTimeKind.Local).AddTicks(1318),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Lagos",
                            StateCode = "15"
                        },
                        new
                        {
                            Id = 16L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 140, DateTimeKind.Local).AddTicks(5609),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Niger",
                            StateCode = "16"
                        },
                        new
                        {
                            Id = 17L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 141, DateTimeKind.Local).AddTicks(612),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Ogun",
                            StateCode = "17"
                        },
                        new
                        {
                            Id = 18L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 141, DateTimeKind.Local).AddTicks(6239),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Ondo",
                            StateCode = "18"
                        },
                        new
                        {
                            Id = 19L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 142, DateTimeKind.Local).AddTicks(1345),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Oyo",
                            StateCode = "19"
                        },
                        new
                        {
                            Id = 20L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 144, DateTimeKind.Local).AddTicks(9542),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Plateau",
                            StateCode = "20"
                        },
                        new
                        {
                            Id = 21L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 147, DateTimeKind.Local).AddTicks(7935),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Rivers",
                            StateCode = "21"
                        },
                        new
                        {
                            Id = 22L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 148, DateTimeKind.Local).AddTicks(7133),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Sokoto",
                            StateCode = "22"
                        },
                        new
                        {
                            Id = 23L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 149, DateTimeKind.Local).AddTicks(3799),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Abia",
                            StateCode = "23"
                        },
                        new
                        {
                            Id = 24L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 153, DateTimeKind.Local).AddTicks(6040),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Edo",
                            StateCode = "24"
                        },
                        new
                        {
                            Id = 25L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 154, DateTimeKind.Local).AddTicks(5556),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Enugu",
                            StateCode = "25"
                        },
                        new
                        {
                            Id = 26L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 155, DateTimeKind.Local).AddTicks(1758),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Jigawa",
                            StateCode = "26"
                        },
                        new
                        {
                            Id = 27L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 158, DateTimeKind.Local).AddTicks(2210),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Kebbi",
                            StateCode = "27"
                        },
                        new
                        {
                            Id = 28L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 159, DateTimeKind.Local).AddTicks(1112),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Kogi",
                            StateCode = "28"
                        },
                        new
                        {
                            Id = 29L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 161, DateTimeKind.Local).AddTicks(3872),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Osun",
                            StateCode = "29"
                        },
                        new
                        {
                            Id = 30L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 162, DateTimeKind.Local).AddTicks(3422),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Taraba",
                            StateCode = "30"
                        },
                        new
                        {
                            Id = 31L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 163, DateTimeKind.Local).AddTicks(1040),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Yobe",
                            StateCode = "31"
                        },
                        new
                        {
                            Id = 32L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 163, DateTimeKind.Local).AddTicks(8051),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Bayelsa",
                            StateCode = "32"
                        },
                        new
                        {
                            Id = 33L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 178, DateTimeKind.Local).AddTicks(3468),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Ebonyi",
                            StateCode = "33"
                        },
                        new
                        {
                            Id = 34L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 179, DateTimeKind.Local).AddTicks(1053),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Ekiti",
                            StateCode = "34"
                        },
                        new
                        {
                            Id = 35L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 179, DateTimeKind.Local).AddTicks(7516),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Gombe",
                            StateCode = "35"
                        },
                        new
                        {
                            Id = 36L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 180, DateTimeKind.Local).AddTicks(3105),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Nassarawa",
                            StateCode = "36"
                        },
                        new
                        {
                            Id = 37L,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 3, 9, 10, 24, 0, 180, DateTimeKind.Local).AddTicks(9427),
                            IPAddress = "192.168.8.193",
                            IsActive = false,
                            Name = "Zamfara",
                            StateCode = "37"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<string>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MarketPlace.Data.Domains.ApplicationUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.HasDiscriminator().HasValue("ApplicationUserRole");
                });

            modelBuilder.Entity("MarketPlace.Data.Domains.Kyc", b =>
                {
                    b.HasOne("MarketPlace.Data.Domains.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("MarketPlace.Data.Domains.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MarketPlace.Data.Domains.Product", b =>
                {
                    b.HasOne("MarketPlace.Data.Domains.ProductBrand", null)
                        .WithMany("Products")
                        .HasForeignKey("ProductBrandId");

                    b.HasOne("MarketPlace.Data.Domains.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("MarketPlace.Data.Domains.ProductCondition", "ProductCondition")
                        .WithMany("Products")
                        .HasForeignKey("ProductConditionId");

                    b.HasOne("MarketPlace.Data.Domains.ProductModel", "ProductModel")
                        .WithMany("Products")
                        .HasForeignKey("ProductModelId");

                    b.HasOne("MarketPlace.Data.Domains.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId");

                    b.HasOne("MarketPlace.Data.Domains.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("ProductCategory");

                    b.Navigation("ProductCondition");

                    b.Navigation("ProductModel");

                    b.Navigation("ProductType");

                    b.Navigation("State");
                });

            modelBuilder.Entity("MarketPlace.Data.Domains.ProductCategory", b =>
                {
                    b.HasOne("MarketPlace.Data.Domains.ProductType", "ProductType")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductTypeId");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("MarketPlace.Data.Domains.ProductModel", b =>
                {
                    b.HasOne("MarketPlace.Data.Domains.ProductBrand", "ProductBrand")
                        .WithMany("ProductModels")
                        .HasForeignKey("ProductBrandId");

                    b.Navigation("ProductBrand");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("MarketPlace.Data.Domains.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MarketPlace.Data.Domains.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MarketPlace.Data.Domains.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("MarketPlace.Data.Domains.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketPlace.Data.Domains.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MarketPlace.Data.Domains.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarketPlace.Data.Domains.ProductBrand", b =>
                {
                    b.Navigation("ProductModels");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("MarketPlace.Data.Domains.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MarketPlace.Data.Domains.ProductCondition", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MarketPlace.Data.Domains.ProductModel", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MarketPlace.Data.Domains.ProductType", b =>
                {
                    b.Navigation("ProductCategories");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
